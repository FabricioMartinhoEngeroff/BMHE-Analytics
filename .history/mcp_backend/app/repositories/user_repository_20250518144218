from uuid import UUID
from sqlalchemy.orm import Session
from sqlalchemy import select

from domain.models.user import User


class UserRepository:
    # Busca por ID
    def find_by_id(self, db: Session, user_id: UUID) -> User | None:
        stmt = select(User).where(User.id == user_id)
        return db.scalars(stmt).first()

    # Busca por email
    def find_by_email(self, db: Session, email: str) -> User | None:
        stmt = select(User).where(User.email == email)
        return db.scalars(stmt).first()

    # Verifica existência por email
    def exist_by_email(self, db: Session, email: str) -> bool:
        stmt = select(User).where(User.email == email)
        return db.scalars(stmt).first() is not None

    # Verifica existência por CPF
    def exist_by_cpf(self, db: Session, cpf: str) -> bool:
        stmt = select(User).where(User.cpf == cpf)
        return db.scalars(stmt).first() is not None

    # Salva ou atualiza um usuário
    def save(self, db: Session, user: User) -> User:
        db.add(user)        # adiciona à sessão
        db.commit()         # persiste no banco
        db.refresh(user)    # atualiza com ID e timestamps
        return user

    # Remove usuário
    def delete(self, db: Session, user: User):
        db.delete(user)
        db.commit()
